＃비동기 처리 로직을 actions에 선언해야 하는 이유
* 언제 어느 컴포넌트에서 해당 state를 호출하고, 변경했는지 확인하기 어렵다.
=> state 값의 변화를 추적하기 어렵기 때문에 mutations에는 동기 처리 로직만, actions에는 비동기 처리 로직만 넣어야 한다.


＃각 속성들을 편하게 사용하는 방법 - Helper(헬퍼 함수)
* Store에 있는 아래 4가지 속성들을 편하게 코딩하는 방법
1. state -> mapState
2. getters -> mapGetters
3. mutations -> mapMutations
4. actions -> mapActions


＃mapState
* Vuex에 선언한 state 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
// App.vue
import { mapState } from 'vuex'

computed(){
  // num() { return this.$store.state.num; }
  ...mapState(['num'])
}

// store.js
state: {
  num: 10
}
* ...(spread operator) 해당 요소가 가진 속성을 전부 뿌려줌

<!-- <p>{{ this.$store.state.num }}</p> -->
<p>{{ this.num }}</p>

＃mapGetters
* Vuex에 선언한 getters 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
// App.vue
import { mapGetters } from 'vuex'

computed(){
  ...mapGetters(['reverseMessage'])
}

// store.js
getters: {
  reverseMessage(state){
    return state.msg.split('').reverse().join('');
  }
}

<!-- <p>{{ this.$store.getters.reverseMessage }}</p> -->
<p>{{ this.reverseMessage }}</p>


＃getters, mapGetters를 사용해서 코드 리팩토링


＃mapMutations
* Vuex에 선언한 mutations 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼

