＃Vuex 학습 개요
* 복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리하는 라이브러리
* Vuex의 등장 배경인 Flux 패턴 
* Vuex 라이브러리 주요 속성인 state, getters, mutations, actions
* Vuex를 더 쉽게 코딩할 수 있는 방법인 Helper 기능
* Vuex로 프로젝트를 구조화 하는 방법과 모듈 구조화 방법

＃Vuex란?
* 무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
* React의 Flux 패턴에서 기인함
* Vue.js 중고급 개발자로 성장하기 위한 필수 관문

＃Flux란?
* MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴(Unidirectional data flow, 단방향 구조) 
  1. action: 화면에서 발생하는 이벤트 또는 사용자의 입력
  2. dispatcher: 데이터를 변경하는 방법
  3. model: 화면에 표시할 데이터
  4. view : 사용자에게 비춰지는 화면
* MVC 패턴(양방향 구조)과 Flux 패턴(단방향 구조) 비교 : https://beomy.tistory.com/44
  1. MVC : 데이터의 흐름이 양방향으로 이루어지기 때문에 애플리케이션이 복잡해질수록 시스템이 복잡해지고   데이터의 변화를 예측하기 힘들다.
  2. Flux : 데이터가 항상 단방향으로 흐르기 때문에 데이터의 변화를 훨씬 예측하기 쉽게 만들어준다.

＃Vuex가 필요한 이유
* 복잡한 애플리케이션에서 컴포넌트의 갯수가 많아지면 컴포넌트 간에 데이터 전달이 어려워진다. (데이터를 전달하는 과정에서 각 컴포넌트들을 다 거쳐야하기 때문)
-> 이벤트 버스로 해결?
* 이벤트가 어디서 보내졌는지 어디서 이벤트를 받았는지 알기 어렵다. 
// Login.vue
eventBus.$emit('fetch', loginInfo);

// List.vue
eventBus.$on('display', data => this.displayOnScreen(data));

// Chart.vue
eventBus.$emit('refreshData', chartData);
(컴포넌트 간 데이터 전달이 명시적이지 않음)

＃Vuex로 해결할 수 있는 문제
* MVC 패턴에서 발생하는 구조적 오류
* 컴포넌트 간 데이터 전달 명시
* 여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제

＃Vuex 컨셉
* State : 컴포넌트 간에 공유되는 데이터 data()
* View : 데이터를 표시하는 화면 template
* Action : 사용자의 입력에 따라 데이터를 변경하는 methods

＃Vuex 구조
* 컴포넌트 -> 비동기 로직 -> 동기 로직 -> 상태

＃Vuex 시작하기
* npm install vuex --save

* src 폴더 밑에 store 폴더 생성 후 store.js 파일 생성

  import Vue from 'vue'
  import Vuex from 'vuex'

  Vue.use(Vuex);

  export const store = new Vuex.Store({
    //
  });

＃Vuex 기술 요소
* state : 컴포넌트 간에 공유되는 데이터 data
* getters : 연산된 state 값을 접근하는 속성 computed
* mutatios : state 값을 변경하는 이벤트 로직 · 메소드 methods
* actions : 비동기 처리 로직을 선언하는 메소드 async methods

＃state란?
* 여러 컴포넌트 간에 공유할 데이터 - 상태
// Vue
data: {
  message: 'Hello Vue.js!'
}

// Vuex
state: {
  message: 'Hello Vue.js!'
}

<!-- Vue -->
<p>{{ message }}</p>

<!-- Vuex -->
<p>{{ this.$store.state.message }}</p>

＃getters란?
* state 값을 접근하는 속성이자 cumputed() 처럼 미리 연산된 값을 접근하는 속성
// store.js
state: {
  num: 10
},
getters: {
  getNumber(state) {
    return state.num;
  },
  doubleNumber(state) {
    return state.num * 2;
  }
}

<p>{{ this.$store.getters.getNumber }}</p>
<p>{{ this.$store.getters.doubleNumber }}</p>

＃Vuex state를 이용해서 TODO 앱 리팩토링 해보기

＃mutations란
* state의 값을 변경할 수 있는 유일한 방법이자 메소드
* 뮤테이션은 commit() 으로 동작시킨다.
// store.js
state: {
  num: 10
},
mutations: {
  printNumbers(state){
    return state.num
  },
  sumNumbers(state, anotherNum){
    return state.num + anotherNum;
  }
}

// App.vue
this.$store.commit('printNumbers');
this.$store.commit('sumNumbers', 20); // mutations의 첫번째 인자값은 무조건 state이다.

＃mutations의 commit() 형식
* state를 변경하기 위해 mutations를 동작시킬 때 인자(payload)를 전달할 수 있다.
// store.js
state: {
  storeNum: 10
},
mutations: {
  modifyState(state, payload){
    console.log(payload.str);
    return state.storeNum += payload.num;
  }
}

// App.vue
this.$store.commit('modifyState', {
  str: 'passed from payload',
  num: 20
});

＃state를 직접 변경하지 않고 mutations으로 변경하는 이유
* 여러 개의 컴포넌트에서 아래와 같이 state 값을 변경하는 경우 어느 컴포넌트에서 해당 state를 변경했는지 추적이 어렵다.
methods: {
  increaseCounter(){
    this.$store.state.counter++;
  }
}
* 특정 시점에 어떤 컴포넌트가 state를 접근하여 변경한 건지 확인하기 어렵다.
* 뷰의 반응성을 거스르지 않게 명시적으로 상태 변화를 수행하기 위해서. 반응성(Reactive), 디버깅, 테스팅에 용이

＃actions란?
* 비동기 처리 로직을 선언하는 메소드. 비동기 로직을 담당하는 mutations
* 데이터 요청, Promise, ES6 async와 같은 비동기 처리는 모두 actions에 선언
// store.js
state: {
  num: 10
},
mutations: {
  doubleNum(state){
    state.num * 2;
  }
},
actions: {
  delayDoubleNumber(context){ // context로 store의 메소드와 속성 접근
    context.commit('doubleNumber');
  }
}

// App.vue
this.$store.dispatch('delayDoubleNumber');

* 비동기 코드 예제1
// store.js
mutations: {
  addCounter(state){
    state.counter++
  }
},
actions: {
  delayDoubleNumber(context){ // context로 store의 메소드와 속성 접근
    setTimeOut(() => context.commit('addCounter'), 2000);
  }
}

// App.vue
methods: {
  incrementCounter() {
    this.$store.dispatch('delayAddCounter');
  }
}

* 비동기 코드 예제2
// store.js
mutations: {
  setData(state, fetchedData){
    state.product = fetchedData;
  }
},
actions: {
  fetchProductData(context) {
    return axios.get('https://domain.com/products/1')
                .then(response => context.commit('setData', response));
  }
}

// App.vue
methods: {
  getProduct(){
    this.$store.dispatch('fetchProductData');
  }
}