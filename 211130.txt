＃ES6 란?
1. == ECMAScript 2015
2. 2015년은 ES5(2009년) 이래로 진행한 첫 메이저 업데이트가 승인된 해
3. 최신 프론트엔드 프레임워크인 리액트, 뷰, 앵귤러에서 권고하는 언어 형식
4. ES5에 비해 문법이 간결해져서 익숙해지면 훨씬 편리한 코딩이 가능


＃Babel
1. 구 버전 브라우저 중에서 ES6 지원을 하지 않는 브라우저가 있기 때문에 transpling (~ 컴파일)이 필요
2. ES6의 문법을 각 브라우저의 호환 가능한 ES5로 변환하는 컴파일러


＃const & let - 새로운 변수 선언 방식
1. 블록 단위 {}로 변수의 범위가 제한
2. const : 한 번 선언한 값에 대해서 변경할 수 없음(상수 개념)
3. let : 한 번 선언한 값에 대해서 다시 선언할 수 없음(재할당은 가능하나 재선언은 불가능)


＃ES5 - 변수의 Scope
1. ES5는 {}에 상관없이 스코프가 설정됨
var sum = 0;
for (var i = 1; i <= 5; i++) {
  sum = sum + 1;
}
console.log(sum); // 15
console.log(i); // 6
＊for문이 끝나고 나서도 i에 접근이 된다.


＃ES5 - Hoisting
1. Hoisting이란 선언한 함수와 변수를 해석기가 가장 상단에 있는 것 처럼 인식한다.
2. js 해석기는 코드의 라인 순서와 관계 없이 함수선언식과 변수를 위한 메모리 공간을 먼저 확보한다.
3. 따라서 function a()와 var는 코드의 최상단으로 끌어 올려진 것(Hoisted)처럼 보인다.

function willBeOveridden() {
  return 10;
}
willBeOveridden(); // 5
function willBeOveridden() {
  return 5;
}


＃ES6 - {} 단위로 변수의 범위가 제한됨
let sum = 0;
for (let i = 1; i <= 5; i++) {
  sum = sum + i;
}
console.log(sum); // 10
console.log(i); // i is not defined


＃ES6 - const
1. 지정한 값 변경 불가능
const a = {};
a.num = 10;
console.log(a); // {num: 10}
2. 객체나 배열의 내부는 변경할 수 있다.
const a = [];
a.push(20);
console.log(a); // [20]

＃ES6 - let
1. 선언한 값에 대해서 다시 선언 불가능
let a = 10;
let a = 20; // error


＃배운 const와 let으로 todo앱 프로젝트에 적용해서 리팩토링 해보기
